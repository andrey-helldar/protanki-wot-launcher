using System;
using System.ComponentModel;
using System.Drawing;
using System.Globalization;
using System.Windows.Forms;

using WoTPinger.Core;
using WoTPinger.Core.Ping;
using WoTPinger.Properties;

namespace WoTPinger.UserInterface.Controls
{
	public sealed class WPPingControl : UserControl
	{
		private const int MaxNameLength = 6;
		private const int MaxTicksCount = 10;

		private readonly PingManager pingManager;
		private readonly int goodPing;
		private readonly int badPing;
		private readonly object syncObject;

		private int tickCounts;
		private Timer timer;
		private PictureBox pbStatus;
		private Label lblServerName;
		private Label lblPing;
		private WPButton btnPing;
		private ToolTip toolTip;

		public WPPingControl()
		{
			InitializeComponent();
			syncObject = new Object();
		}

		public WPPingControl(Server server, int goodPing, int badPing, int pingInterval)
			: this()
		{
			this.goodPing = goodPing;
			this.badPing = badPing;

			SetServerName(server.Name);
			timer.Interval = pingInterval;

			pingManager = new PingManager(server.Address);
			pingManager.PingReceived += HandlePingResponse;
		}

		public void SetToolTip(ToolTip tooltip)
		{
			toolTip = tooltip;
		}

		protected override void OnLoad(EventArgs e)
		{
			base.OnLoad(e);
			SetButtonToolTip(Resources.Stop);
			SetPingStatus(Resources.StatusDisabled, Resources.DefaultPingText);

			TryPingServer(timer, EventArgs.Empty);
			timer.Start();
		}

		private void TryPingServer(object sender, EventArgs e)
		{
			if (++tickCounts >= MaxTicksCount)
			{
				ResetPingCounter();
				ClickPingButton(this, EventArgs.Empty);
			}
			else
			{
				pingManager.SendPing();
			}
		}

		private void HandlePingResponse(object sender, PingReceivedEventArgs e)
		{
			lock (syncObject)
			{
				switch (e.Status)
				{
					case PingStatus.Success:
						ResolveAndSetPingStatus(e.Time);
						break;
					case PingStatus.Error:
						SetPingStatus(Resources.StatusDisabled, Resources.DefaultPingText);
						break;
					case PingStatus.InProgress:
						break;
				}
			}
		}

		private void ClickPingButton(object sender, EventArgs e)
		{
			lock (syncObject)
			{
				bool enabled = timer.Enabled = !timer.Enabled;

				if (enabled)
				{
					btnPing.Image = Resources.Pause;
					SetButtonToolTip(Resources.Stop);
					TryPingServer(timer, EventArgs.Empty);
				}
				else
				{
					ResetPingCounter();
					btnPing.Image = Resources.Start;
					SetButtonToolTip(Resources.Run);
				}
			}
		}

		private void SetPingStatus(Image statusImage, string pingText)
		{
			pbStatus.Image = statusImage;
			lblPing.Text = pingText;
		}

		private void ResolveAndSetPingStatus(long roundTripTime)
		{
			string pingText = roundTripTime.ToString(CultureInfo.InvariantCulture);
			Image statusImage;

			if (roundTripTime < goodPing)
			{
				statusImage = Resources.StatusGood;
			}
			else if (roundTripTime > badPing)
			{
				statusImage = Resources.StatusBad;
			}
			else
			{
				statusImage = Resources.StatusMedium;
			}

			SetPingStatus(statusImage, pingText);
		}

		private void SetServerName(string name)
		{
			lblServerName.Text = String.IsNullOrEmpty(name)
				? Resources.DefaultServerName
				: name.Substring(0, Math.Min(MaxNameLength, name.Length));
		}

		private void ResetPingCounter()
		{
			tickCounts = 0;
		}

		private void SetButtonToolTip(string formatText)
		{
			if (toolTip != null)
			{
				toolTip.SetToolTip(btnPing, String.Format(formatText, lblServerName.Text));
				toolTip.Hide(btnPing);
			}
		}

		private void EnterPingButton(object sender, EventArgs e)
		{
			btnPing.Image = timer.Enabled ? Resources.PauseHover : Resources.StartHover;
		}

		private void LeavePingButton(object sender, EventArgs e)
		{
			btnPing.Image = timer.Enabled ? Resources.Pause : Resources.Start;
		}

		#region Auto-generated by Visual Studio

		private void InitializeComponent()
		{
			SuspendLayout();

			// timer
			timer = new Timer { Enabled = false };
			timer.Tick += TryPingServer;

			// lblServerName
			lblServerName = new Label();
			lblServerName.BackColor = Color.Transparent;
			lblServerName.CausesValidation = false;
			lblServerName.ForeColor = Color.FromArgb(211, 210, 205);
			lblServerName.Location = new Point(0, 0);
			lblServerName.TextAlign = ContentAlignment.MiddleRight;
			lblServerName.Name = "lblServerName";
			lblServerName.Padding = new Padding(0);
			lblServerName.AutoSize = false;
			lblServerName.Size = new Size(98, 22);
			lblServerName.UseMnemonic = false;

			// lblPing
			lblPing = new Label();
			lblPing.BackColor = Color.Transparent;
			lblPing.CausesValidation = false;
			lblPing.ForeColor = Color.FromArgb(111, 110, 105);
			lblPing.Location = new Point(108, 0);
			lblPing.TextAlign = ContentAlignment.MiddleLeft;
			lblPing.Name = "lblPing";
			lblPing.Padding = new Padding(0);
			lblPing.AutoSize = false;
			lblPing.Size = new Size(25, 22);
			lblPing.UseMnemonic = false;

			// pbStatus
			pbStatus = new PictureBox();
			((ISupportInitialize)(pbStatus)).BeginInit();
			pbStatus.BackColor = Color.Transparent;
			pbStatus.Location = new Point(133, 0);
			pbStatus.Margin = new Padding(0);
			pbStatus.Name = "pbStatus";
			pbStatus.Size = new Size(22, 22);
			pbStatus.TabStop = false;

			// btnPing
			btnPing = new WPButton();
			btnPing.CausesValidation = false;
			btnPing.Cursor = Cursors.Hand;
			btnPing.Image = Resources.Pause;
			btnPing.Location = new Point(157, 2);
			btnPing.Name = "btnPing";
			btnPing.Size = new Size(18, 18);
			btnPing.TabIndex = 0;
			btnPing.Click += ClickPingButton;
			btnPing.MouseEnter += EnterPingButton;
			btnPing.MouseLeave += LeavePingButton;

			// ServerPing
			AutoScaleDimensions = new SizeF(6F, 13F);
			AutoScaleMode = AutoScaleMode.Font;
			Font = new Font("Tahoma", 8F);
			BackColor = Color.Transparent;
			Controls.Add(btnPing);
			Controls.Add(lblPing);
			Controls.Add(lblServerName);
			Controls.Add(pbStatus);
			Margin = new Padding(0);
			Name = "WPPingControl";
			Size = new Size(236, 22);
			((ISupportInitialize)(pbStatus)).EndInit();
			ResumeLayout(false);
		}

		#endregion

		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				timer.Stop();
				timer.Dispose();
				pingManager.Dispose();
			}

			base.Dispose(disposing);
		}

		~WPPingControl()
		{
			Dispose(false);
		}
	}
}