using System;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

using Timer = System.Windows.Forms.Timer;

namespace WoTPinger.UserInterface.Controls
{
	public sealed class WPCarousel : UserControl
	{
		public PageCollection Pages;

		private WPPanel pagesHolder;
		private int selectedIndex;
		private readonly Timer slideTimer;

		DateTime start, finish;
		int duration = 500, interval = 10;
		int from, to;

		public WPCarousel()
			: this(SlideDirection.Horizontal)
		{ }

		public WPCarousel(SlideDirection slideDirection)
		{
			InitializeComponent();

			Pages = new PageCollection(pagesHolder);

			SlideDirection = slideDirection;

			pagesHolder.ControlAdded += RefreshHolder;
			pagesHolder.ControlRemoved += RefreshHolder;

			slideTimer = new Timer { Interval = interval, Enabled = false };
			slideTimer.Tick += (s, e) =>
			{
				var now = DateTime.Now;
				bool hor = slideDirection == SlideDirection.Horizontal;

				if (now < finish)
				{
					double progress = ((now - start).TotalMilliseconds / duration) - 1;
					double delta = Math.Sqrt(1 - progress * progress);
					pagesHolder.Location = hor
						? new Point((int)(from + (to - from)*delta), pagesHolder.Location.Y)
						: new Point(pagesHolder.Location.X, (int)(from + (to - from)*delta));
				}
				else
				{
					pagesHolder.Location = hor
						? new Point(to, pagesHolder.Location.Y)
						: new Point(pagesHolder.Location.X, to);
					slideTimer.Stop();
				}
			};
		}

		public event EventHandler<EventArgs> SelectedIndexChanged;

		public SlideDirection SlideDirection { get; private set; }

		public int SlideDuration
		{
			get { return duration; }
			set { duration = Math.Max(value, 0); }
		}

		public int SlideUpdateInterval
		{
			get { return interval; }
			set { interval = Math.Max(value, 10); }
		}

		public int PagesCount
		{
			get { return pagesHolder.Controls.Count; }
		}

		public int SelectedIndex
		{
			get { return selectedIndex; }
			set
			{
				value = Math.Min(Math.Max(value, 0), PagesCount);
				if (selectedIndex != value)
				{
					selectedIndex = value;
					StartSlide();
					OnSelectedIndexChanged();
				}
			}
		}

		private void StartSlide()
		{
			start = DateTime.Now;
			finish = start.AddMilliseconds(duration);
			SetSlideMetrics();
			slideTimer.Enabled = true;
		}

		private void SetSlideMetrics()
		{
			bool hor = SlideDirection == SlideDirection.Horizontal;
			from = hor ? pagesHolder.Location.X : pagesHolder.Location.Y;
			to = -(hor ? Width : Height)*selectedIndex;
		}

		public Page SelectedPage
		{
			get { return (Page)pagesHolder.Controls[selectedIndex]; }
		}

		private void RefreshHolder(object sender, ControlEventArgs controlEventArgs)
		{
			UpdateHolderMetrics();
		}

		private void UpdateHolderMetrics()
		{
			var pages = pagesHolder.Controls;
			var count = pages.Count;
			bool hor = SlideDirection == SlideDirection.Horizontal;

			if (hor)
			{
				pagesHolder.Width = Width * (count > 0 ? count : 1);
				pagesHolder.Height = Height;
			}
			else
			{
				pagesHolder.Width = Width;
				pagesHolder.Height = Height * (count > 0 ? count : 1);
			}

			pagesHolder.Location = hor ? new Point(-Width*SelectedIndex, 0)
				                       : new Point(0, -Height*SelectedIndex);

			for (int i = 0; i < count; i++)
			{
				pages[i].Width = Width;
				pages[i].Height = Height;
				pages[i].Location = hor ? new Point(i*Width, 0)
					                    : new Point(0, i*Height);
			}
		}

		protected override void OnResize(EventArgs e)
		{
			base.OnResize(e);
			SetSlideMetrics();
		}

		private void OnSelectedIndexChanged()
		{
			var tempEvent = Interlocked.CompareExchange(ref SelectedIndexChanged, null, null);
			if (tempEvent != null) tempEvent(this, new EventArgs());
		}

		#region Auto-generated by Visual Studio

		private void InitializeComponent()
		{
			pagesHolder = new WPPanel();
			SuspendLayout();

			// pagesHolder
			pagesHolder.Location = new Point();
			pagesHolder.Name = "pagesHolder";
			pagesHolder.Size = new Size();
			pagesHolder.TabIndex = 0;

			// WPCarousel
			AutoScaleDimensions = new SizeF(6F, 13F);
			AutoScaleMode = AutoScaleMode.Font;
			Controls.Add(pagesHolder);
			Name = "WPCarousel";
			ResumeLayout(false);
		}

		#endregion
	}
}