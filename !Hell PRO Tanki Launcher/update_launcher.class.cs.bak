using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Windows.Forms;
using System.Net;
using System.Xml;
using System.Threading.Tasks;

namespace _Hell_PRO_Tanki_Launcher
{
    class UpdateLauncher
    {
        Debug Debug = new Debug();

        private string url = @"http://ai-rus.com/pro/";
        private ProgressBar downloadPercent = null;

        bool finishDownload = false;

        public void Check(bool launcher = false, ProgressBar report = null)
        {
            try
            {
                XmlDocument doc = new XmlDocument();
                doc.Load(url + "protanks.xml");

                if (!File.Exists("settings.xml"))
                {
                    using (var client = new WebClient())
                    {
                        Task.Factory.StartNew(() => client.DownloadFile(new Uri(url + "settings.xml"), "settings.xml")).Wait();
                        client.Dispose();
                    }
                }

                /// Удаляем ненужные файлы
                DeleteFile("processes.exe");
                DeleteFile("!Hell PRO Tanki Launcher.exe");

                /// Если файлы имеют нулевой размер, то удаляем их
                DeleteNullFile("settings.xml Ionic.Zip.dll restart.exe updater.exe Newtonsoft.Json.dll ProcessesLibrary.dll LanguagePack.dll launcher.update");

                CheckFile("Ionic.Zip.dll");
                CheckFile("restart.exe");
                CheckFile("updater.exe");
                CheckFile("Newtonsoft.Json.dll");
                CheckFile("ProcessesLibrary.dll");
                CheckFile("LanguagePack.dll");

                if (!launcher) // Определяем будем запускать скачивание до обновления или после
                {
                    var task1 = DownloadFile("Ionic.Zip.dll", doc.GetElementsByTagName("Ionic.Zip")[0].InnerText, doc.GetElementsByTagName("Ionic.Zip")[0].Attributes["checksum"].InnerText);
                    var task2 = DownloadFile("restart.exe", doc.GetElementsByTagName("restart")[0].InnerText, doc.GetElementsByTagName("restart")[0].Attributes["checksum"].InnerText);
                    var task3 = DownloadFile("LanguagePack.dll", doc.GetElementsByTagName("languagePack")[0].InnerText, doc.GetElementsByTagName("languagePack")[0].Attributes["checksum"].InnerText);

                    await Task.WaitAll(task1, task2, task3);
                }
                else
                {
                    try
                    {
                        // Скачиваем необходимые файлы
                        var task4 = DownloadFile("updater.exe", doc.GetElementsByTagName("updater")[0].InnerText, doc.GetElementsByTagName("updater")[0].Attributes["checksum"].InnerText);
                        var task5 = DownloadFile("Newtonsoft.Json.dll", doc.GetElementsByTagName("Newtonsoft.Json")[0].InnerText, doc.GetElementsByTagName("Newtonsoft.Json")[0].Attributes["checksum"].InnerText);
                        var task6 = DownloadFile("ProcessesLibrary.dll", doc.GetElementsByTagName("processesLibrary")[0].InnerText, doc.GetElementsByTagName("processesLibrary")[0].Attributes["checksum"].InnerText);

                        Task.WaitAll(task4, task5, task6);

                        if (File.Exists("launcher.update") && new Version(FileVersionInfo.GetVersionInfo("launcher.update").FileVersion) > new Version(Application.ProductVersion))
                        {
                            Process.Start("updater.exe", "launcher.update \"" + Application.ProductName + ".exe\"");
                            Process.GetCurrentProcess().Kill();
                        }
                        else if (new Version(Application.ProductVersion) < new Version(doc.GetElementsByTagName("version")[0].InnerText))
                        {
                            if (report != null)
                            {
                                downloadPercent = report;
                                downloadPercent.Value = 0;
                            }

                            Task.Factory.StartNew(() => DownloadFile("launcher.exe", doc.GetElementsByTagName("version")[0].InnerText, doc.GetElementsByTagName("version")[0].Attributes["checksum"].InnerText, "launcher.update", true)).Wait();
                        }
                        else if (File.Exists("launcher.update")) { File.Delete("launcher.update"); }
                    }
                    catch (Exception ex1)
                    {
                        Debug.Save("public void Check(bool launcher = false)", "launcher.update", ex1.Message);
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Save("public void Check(bool launcher = false)", "", ex.Message);
            }
        }

        private bool Checksum(string filename, string summ)
        {
            try
            {
                if (File.Exists(filename) && summ != null && new FileInfo(filename).Length > 0)
                    using (FileStream fs = File.OpenRead(filename))
                    {
                        System.Security.Cryptography.MD5 md5 = new System.Security.Cryptography.MD5CryptoServiceProvider();
                        byte[] fileData = new byte[fs.Length];
                        fs.Read(fileData, 0, (int)fs.Length);
                        byte[] checksum = md5.ComputeHash(fileData);
                        return BitConverter.ToString(checksum) == summ.ToUpper();
                    }
                else
                    return false;
            }
            catch (Exception ex)
            {
                Debug.Save("private bool checksum(string filename, string summ)", "Filename: " + filename, ex.Message);
                return false;
            }
        }

        //private void DownloadFile(string filename, string xmlVersion, string xmlchecksum, string localFile = null, bool showStatus = false)
        private async Task<int> DownloadFile(IProgress<int> progress, string filename, string xmlVersion, string xmlchecksum, string localFile = null, bool showStatus = false)
        {
            localFile = localFile != null ? localFile : filename;

            if (File.Exists(localFile) && new FileInfo(localFile).Length == 0) { File.Delete(localFile); }

            try
            {
                if ((File.Exists(localFile) && new Version(FileVersionInfo.GetVersionInfo(localFile).FileVersion) < new Version(xmlVersion)) || !File.Exists(localFile))
                {
                    using (var client = new WebClient())
                    {
                        try
                        {
                            if (showStatus && downloadPercent != null)
                            {
                                client.DownloadProgressChanged += new DownloadProgressChangedEventHandler(ProgressChanged);
                                client.DownloadFileCompleted += new AsyncCompletedEventHandler(client_DownloadFileCompleted);
                                client.DownloadFileAsync(new Uri(url + filename), localFile);
                            }
                            else
                                client.DownloadFile(new Uri(url + filename), localFile);

                            if (!Checksum(localFile, xmlchecksum) && File.Exists(localFile))
                            {
                                File.Delete(localFile);
                                //client.DownloadFileAsync(new Uri(url + filename), localFile);
                            }

                            client.Dispose();
                        }
                        catch (Exception ex)
                        {
                            Debug.Save("private void DownloadFile(string filename, string xmlVersion, string xmlchecksum)",
                                "Filename: " + filename + Environment.NewLine +
                                "Localname: " + (localFile != null ? localFile : "null") + Environment.NewLine +
                                "URL: " + url,
                                ex.Message);
                        }
                    }
                }
            }
            catch (Exception ex1)
            {
                Debug.Save("private void DownloadFile(string filename, string xmlVersion, string xmlchecksum)",
                    "Error download" + Environment.NewLine +
                    "Filename: " + filename + Environment.NewLine +
                    "Localname: " + (localFile != null ? localFile : "null") + Environment.NewLine +
                    "URL: " + url,
                    ex1.Message);
            }
        }

        void client_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e)
        {
            finishDownload = true;
            throw new NotImplementedException();
        }

        private void ProgressChanged(object sender, DownloadProgressChangedEventArgs e)
        {
            downloadPercent.Value = e.ProgressPercentage;
        }

        private void CheckFile(string filename)
        {
            if (File.Exists(filename))
            {
                try
                {
                    string s = FileVersionInfo.GetVersionInfo(filename).FileVersion;
                }
                catch (Exception) { }
            }
        }

        private void DeleteNullFile(string[] fileArr)
        {
		foreach(string filename in fileArr)
            if (File.Exists(filename) && new FileInfo(filename).Length == 0) { File.Delete(filename); }
        }

        private void DeleteFile(string filename)
        {
            if (File.Exists(filename)) { File.Delete(filename); }
        }
    }
}